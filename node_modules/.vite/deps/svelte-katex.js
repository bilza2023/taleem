import {
  katex
} from "./chunk-A3KPZBKS.js";
import "./chunk-X7HCJ7ZS.js";
import "./chunk-AYNHEKRI.js";
import {
  SvelteComponentDev,
  add_location,
  afterUpdate,
  binding_callbacks,
  children,
  claim_element,
  claim_space,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  get_all_dirty_from_scope,
  get_slot_changes,
  init,
  insert_hydration_dev,
  safe_not_equal,
  set_style,
  space,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-3XBAGWFC.js";
import "./chunk-2GBBIY5G.js";
import "./chunk-DC5AMYBS.js";

// node_modules/svelte-katex/Katex.svelte
var file = "node_modules/svelte-katex/Katex.svelte";
function create_fragment(ctx) {
  let span0;
  let t;
  let span1;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  const block = {
    c: function create() {
      span0 = element("span");
      if (default_slot) default_slot.c();
      t = space();
      span1 = element("span");
      this.h();
    },
    l: function claim(nodes) {
      span0 = claim_element(nodes, "SPAN", { style: true });
      var span0_nodes = children(span0);
      if (default_slot) default_slot.l(span0_nodes);
      span0_nodes.forEach(detach_dev);
      t = claim_space(nodes);
      span1 = claim_element(nodes, "SPAN", {});
      children(span1).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_style(span0, "display", "none");
      add_location(span0, file, 12, 0, 337);
      add_location(span1, file, 17, 0, 434);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, span0, anchor);
      if (default_slot) {
        default_slot.m(span0, null);
      }
      ctx[5](span0);
      insert_hydration_dev(target, t, anchor);
      insert_hydration_dev(target, span1, anchor);
      ctx[6](span1);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(span0);
        detach_dev(t);
        detach_dev(span1);
      }
      if (default_slot) default_slot.d(detaching);
      ctx[5](null);
      ctx[6](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Katex", slots, ["default"]);
  let { displayMode = false } = $$props;
  let output;
  let latex;
  afterUpdate(async () => {
    katex.render(latex.textContent, output, { displayMode });
  });
  const writable_props = ["displayMode"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Katex> was created with unknown prop '${key}'`);
  });
  function span0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      latex = $$value;
      $$invalidate(1, latex);
    });
  }
  function span1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      output = $$value;
      $$invalidate(0, output);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("displayMode" in $$props2) $$invalidate(2, displayMode = $$props2.displayMode);
    if ("$$scope" in $$props2) $$invalidate(3, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    katex,
    afterUpdate,
    displayMode,
    output,
    latex
  });
  $$self.$inject_state = ($$props2) => {
    if ("displayMode" in $$props2) $$invalidate(2, displayMode = $$props2.displayMode);
    if ("output" in $$props2) $$invalidate(0, output = $$props2.output);
    if ("latex" in $$props2) $$invalidate(1, latex = $$props2.latex);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [output, latex, displayMode, $$scope, slots, span0_binding, span1_binding];
}
var Katex = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { displayMode: 2 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Katex",
      options,
      id: create_fragment.name
    });
  }
  get displayMode() {
    throw new Error("<Katex>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set displayMode(value) {
    throw new Error("<Katex>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Katex_default = Katex;
export {
  Katex_default as default
};
//# sourceMappingURL=svelte-katex.js.map
